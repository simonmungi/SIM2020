using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace TP2_NetFramework
{
    public class Gestor
    {
        public int n { get; set; }//tamaño muestra

        public int cantIntervalos { get; set; }
        public double min { get; set; }
        public double max { get; set; }
        public double media { get; set; }
        public double varianza { get; set; }
        public double desviacion { get; set; }

        public List<double> muestras;

        public List<double[]> intervalos;

        public double[] frecuenciasObservadas;

        public double[] frecuenciasEsperadas;

        public double[] probEsperadas;

        public double[] probObservadas;

        public string[] intervMedio;//para el grafico

        public double[] acumProbEsperada;

        public double[] acumProbObservada;

        public IEstrategia estrategiaDistribucion;

        public double[,] chi;

        public double estadisticoCHI;

        public double[,] ks;

        public double estadisticoKS;

        public double gradosLibertad;

        public int i;
        public int j;

        //estas se ingresan
        public double a { get; set; }
        public double b { get; set; }

        public double sigma { get; set; }
        public double u { get; set; }

        public double lambda { get; set; }



        public Gestor() { }

        //hago calculos iniciales de los valores generados
        public void generarDatos(int cantidad)
        {
            n = cantidad;
            muestras = new List<double>();
            min = Double.MaxValue;
            max = Double.MinValue;
            double sumaTotal = 0;
            double var = 0;

            for (int i =0; i<n; i++)
            {
                double num = estrategiaDistribucion.generarValor(this);
                muestras.Add(num);
                if (num < min) { min = num; }
                if (num > max) { max = num; }

                sumaTotal += num;
            }

            media = sumaTotal / cantidad;
            
            //calculo varianza////
            for (int i = 0; i < n; i++)
            {
                var += Math.Pow((muestras.ElementAt(i) - media), 2);
            }

            varianza = var / n;
            desviacion = Math.Sqrt(varianza);
        }

        public void obtenerFrecuencias(double pasos)
        {
            intervalos = new List<double[]>();
            frecuenciasObservadas = new double[cantIntervalos];
            frecuenciasEsperadas = new double[cantIntervalos];
            probObservadas = new double[cantIntervalos];
            probEsperadas = new double[cantIntervalos];
            acumProbEsperada = new double[cantIntervalos];
            acumProbObservada = new double[cantIntervalos];

            intervMedio = new string[cantIntervalos]; //para el grafico

            //Primer intervalo
            double[] primero = { Math.Round(min, 4), Math.Round(min + pasos, 4) };
            intervalos.Add(primero);
            
            //calculo rangos
            for (int i = 1; i < cantIntervalos; i++)
            {
                double minimo = Math.Round(intervalos.ElementAt(i - 1)[1], 4);
                double maximo = Math.Round(minimo + pasos, 4);
                double[] filaIntervalo = { minimo, maximo };

                intervalos.Add(filaIntervalo);
            }

            //calculo frecuencias observadas
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < cantIntervalos; j++)
                {
                    if (muestras[i] >= intervalos[j][0] && muestras[i] < intervalos[j][1])
                    {
                        frecuenciasObservadas[j]++;
                    }
                }
            }

            //calculo probabilidades de Obs
            for(int i = 0; i < cantIntervalos; i++)
            {
                probObservadas[i] = frecuenciasObservadas[i] / n;

            }
            //probabilidades acumuladas
            acumProbObservada[0] = probObservadas[0];
            for (int i = 1; i < cantIntervalos; i++)
            {
                acumProbObservada[i] = acumProbObservada[i - 1] + probObservadas[i];

            }

            //calculo intervalos para el grafico
            for (int i = 0; i < cantIntervalos; i++)
            {
                intervMedio[i] = Convert.ToString(Math.Round((intervalos[i][0] + intervalos[i][1])/2 , 4));
            } 
        }


        public void cargarChi()
        {
            this.chi = new double[,]{
                { 0.000,   0.000,   0.001,   0.004,   0.016,   2.706,   3.841,   5.024,   6.635,   7.879},
                { 0.010,   0.020,   0.051,   0.103,   0.211,   4.605,   5.991,   7.378,   9.210,  10.597},
                { 0.072,   0.115,   0.216,   0.352,   0.584,   6.251,   7.815,   9.348,  11.345,  12.838},
                { 0.207,   0.297,   0.484,   0.711,   1.064,   7.779,   9.488,  11.143,  13.277,  14.860},
                { 0.412,   0.554,   0.831,   1.145,   1.610,   9.236,  11.070,  12.833,  15.086,  16.750},
                { 0.676,   0.872,   1.237,   1.635,   2.204,  10.645,  12.592,  14.449,  16.812,  18.548},
                { 0.989,   1.239,   1.690,   2.167,   2.833,  12.017,  14.067,  16.013,  18.475,  20.278},
                { 1.344,   1.646,   2.180,   2.733,   3.490,  13.362,  15.507,  17.535,  20.090,  21.955},
                { 1.735,   2.088,   2.700,   3.325,   4.168,  14.684,  16.919,  19.023,  21.666,  23.589},
                { 2.156,   2.558,   3.247,   3.940,   4.865,  15.987,  18.307,  20.483,  23.209,  25.188},
                { 2.603,   3.053,   3.816,   4.575,   5.578,  17.275,  19.675,  21.920,  24.725,  26.757},
                { 3.074,   3.571,   4.404,   5.226,   6.304,  18.549,  21.026,  23.337,  26.217,  28.300},
                { 3.565,   4.107,   5.009,   5.892,   7.042,  19.812,  22.362,  24.736,  27.688,  29.819},
                { 4.075,   4.660,   5.629,   6.571,   7.790,  21.064,  23.685,  26.119,  29.141,  31.319},
                { 4.601,   5.229,   6.262,   7.261,   8.547,  22.307,  24.996,  27.488,  30.578,  32.801},
                { 5.142,   5.812,   6.908,   7.962,   9.312,  23.542,  26.296,  28.845,  32.000,  34.267},
                { 5.697,   6.408,   7.564,   8.672,  10.085,  24.769,  27.587,  30.191,  33.409,  35.718},
                { 6.265,   7.015,   8.231,   9.390,  10.865,  25.989,  28.869,  31.526,  34.805,  37.156},
                { 6.844,   7.633,   8.907,  10.117,  11.651,  27.204,  30.144,  32.852,  36.191,  38.582},
                { 7.434,   8.260,   9.591,  10.851,  12.443,  28.412,  31.410,  34.170,  37.566,  39.997},
                { 8.034,   8.897,  10.283,  11.591,  13.240,  29.615,  32.671,  35.479,  38.932,  41.401},
                { 8.643,   9.542,  10.982,  12.338,  14.041,  30.813,  33.924,  36.781,  40.289,  42.796},
                { 9.260,  10.196,  11.689,  13.091,  14.848,  32.007,  35.172,  38.076,  41.638,  44.181},
                { 9.886,  10.856,  12.401,  13.848,  15.659,  33.196,  36.415,  39.364,  42.980,  45.559},
                { 10.520,  11.524,  13.120,  14.611,  16.473,  34.382,  37.652,  40.646,  44.314,  46.928},
                { 11.160,  12.198,  13.844,  15.379,  17.292,  35.563,  38.885,  41.923,  45.642,  48.290},
                { 11.808,  12.879,  14.573,  16.151,  18.114,  36.741,  40.113,  43.195,  46.963,  49.645},
                { 12.461,  13.565,  15.308,  16.928,  18.939,  37.916,  41.337,  44.461,  48.278,  50.993},
                { 13.121,  14.256,  16.047,  17.708,  19.768,  39.087,  42.557,  45.722,  49.588,  52.336},
                { 13.787,  14.953,  16.791,  18.493,  20.599,  40.256,  43.773,  46.979,  50.892,  53.672},
                { 20.707,  22.164,  24.433,  26.509,  29.051,  51.805,  55.758,  59.342,  63.691,  66.766},
                { 27.991,  29.707,  32.357,  34.764,  37.689,  63.167,  67.505,  71.420,  76.154,  79.490},
                { 35.534,  37.485,  40.482,  43.188,  46.459,  74.397,  79.082,  83.298,  88.379,  91.952},
                { 43.275,  45.442,  48.758,  51.739,  55.329,  85.527,  90.531,  95.023, 100.425, 104.215},
                { 51.172,  53.540,  57.153,  60.391,  64.278,  96.578, 101.879, 106.629, 112.329, 116.321},
                { 59.196,  61.754,  65.647,  69.126,  73.291, 107.565, 113.145, 118.136, 124.116, 128.299},
                { 67.328,  70.065,  74.222,  77.929,  82.358, 118.498, 124.342, 129.561, 135.807, 140.169}};
        }

        public void cargarKS()
        {
            this.ks = new double[,]
            {
                {0.90000,   0.95000  , 0.97500 ,  0.99000, 0.99500, 0.99750 ,0.99900  , 0.99950}  ,
                {0.68337 ,  0.77639  , 0.84189 ,  0.90000 ,0.92929, 0.95000, 0.96838  , 0.97764}  ,
                {0.56481,   0.63604,   0.70760,   0.78456, 0.82900, 0.86428, 0.90000,   0.92065}  ,
                {0.49265,   0.56522 ,  0.62394,   0.68887 ,0.73424, 0.77639, 0.82217,   0.85047}  ,
                {0.44698  , 0.50945  , 0.56328  , 0.62718, 0.66853, 0.70543, 0.75000,   0.78137}  ,
                {0.41037  , 0.46799 ,  0.51926   ,0.57741, 0.61661, 0.65287, 0.69571 ,  0.72479}  ,
                {0.38148   ,0.43607   ,0.48342   ,0.53844 ,0.57581 ,0.60975 ,0.65071  , 0.67930}  ,
                {0.35831   ,0.40962   ,0.45427   ,0.50654 ,0.54179 ,0.57429 ,0.61368 ,  0.64098}  ,
                {0.33910   ,0.38746   ,0.43001   ,0.47960 ,0.51332 ,0.54443 ,0.58210  , 0.60846}  ,
                {0.32260   ,0.36866   ,0.40925   ,0.45562 ,0.48893 ,0.51872 ,0.55500  , 0.58042}  ,
                {0.30829   ,0.35242   ,0.39122   ,0.43670 ,0.46770 ,0.49539 ,0.53135  , 0.55588}  ,
                {0.29577   ,0.33815   ,0.37543   ,0.41918 ,0.44905 ,0.47672 ,0.51047  , 0.53422}  ,
                {0.28470   ,0.32549   ,0.36143   ,0.40362 ,0.43247 ,0.45921 ,0.49189   ,0.51490}  ,
                {0.27481   ,0.31417   ,0.34890   ,0.38970 ,0.41762 ,0.44352 ,0.47520,   0.49753}  ,
                {0.26589   ,0.30397   ,0.33750   ,0.37713 ,0.40420 ,0.42934 ,0.45611 ,  0.48182}  ,
                {0.25778   ,0.29472   ,0.32733   ,0.36571 ,0.39201 ,0.41644 ,0.44637  , 0.46750}  ,
                {0.25039   ,0.28627   ,0.31796   ,0.35528 ,0.38086 ,0.40464 ,0.43380   ,0.45540}  ,
                {0.24360   ,0.27851   ,0.30936   ,0.34569 ,0.37062 ,0.39380 ,0.42224,   0.44234}  ,
                {0.23735   ,0.27136   ,0.30143   ,0.33685 ,0.36117 ,0.38379 ,0.41156  , 0.43119}  ,
                {0.23156   ,0.26473   ,0.29408   ,0.32866 ,0.35241 ,0.37451 ,0.40165   ,0.42085} ,
                {0.22517   ,0.25858   ,0.28724   ,0.32104 ,0.34426 ,0.36588 ,0.39243,   0.41122},
                {0.22115   ,0.25283   ,0.28087   ,0.31394 ,0.33666 ,0.35782 ,0.38382  , 0.40223},
                {0.21646   ,0.24746   ,0.2749    ,0.30728 ,0.32954 ,0.35027 ,0.37575   ,0.39380}  ,
                {0.21205   ,0.24242   ,0.26931   ,0.30104 ,0.32286 ,0.34318 ,0.36787   ,0.38588}  ,
                {0.20790   ,0.23768   ,0.26404   ,0.29518 ,0.31657 ,0.33651 ,0.36104 ,  0.37743}  ,
                {0.20399   ,0.23320   ,0.25908   ,0.28962 ,0.30963 ,0.33022 ,0.35431  , 0.37139}  ,
                {0.20030   ,0.22898   ,0.25438   ,0.28438 ,0.30502 ,0.32425 ,0.34794 ,  0.36473}  ,
                {0.19680   ,0.22497   ,0.24993   ,0.27942 ,0.29971 ,0.31862 ,0.34190  , 0.35842}  ,
                {0.19348   ,0.22117   ,0.24571   ,0.27471 ,0.29466 ,0.31327 ,0.33617   ,0.35242}  ,
                {0.19032   ,0.21756   ,0.24170   ,0.27023 ,0.28986 ,0.30818 ,0.33072 ,  0.34672}  ,
                {0.18732   ,0.21412   ,0.23788   ,0.26596 ,0.28529 ,0.30333 ,0.32553  , 0.34129}  ,
                {0.18445   ,0.21085   ,0.23424   ,0.26189 ,0.28094 ,0.29870 ,0.32058  , 0.33611}  ,
                {0.18171   ,0.20771   ,0.23076   ,0.25801 ,0.27577 ,0.29428 ,0.31584   ,0.33115}  ,
                {0.17909   ,0.21472   ,0.22743   ,0.25429 ,0.27271 ,0.29005 ,0.31131  , 0.32641}  ,
                {0.17659   ,0.20185   ,0.22425   ,0.25073 ,0.26897 ,0.28600 ,0.30597  , 0.32187}  ,
                {0.17418   ,0.19910   ,0.22119   ,0.24732 ,0.26532 ,0.28211 ,0.30281   ,0.31751}  ,
                {0.17188   ,0.19646   ,0.21826   ,0.24404 ,0.26180 ,0.27838, 0.29882   ,0.31333}  ,
                {0.16966   ,0.19392   ,0.21544   ,0.24089 ,0.25843 ,0.27483, 0.29498  , 0.30931} ,
                {0.16753   ,0.19148   ,0.21273   ,0.23785 ,0.25518 ,0.27135, 0.29125  , 0.30544},
                {0.16547   ,0.18913   ,0.21012   ,0.23494 ,0.25205 ,0.26803, 0.28772  , 0.30171},
                {0.16349   ,0.18687   ,0.20760   ,0.23213 ,0.24904 ,0.26482, 0.28429  , 0.29811},
                {0.16158   ,0.18468   ,0.20517   ,0.22941 ,0.24613 ,0.26173, 0.28097 ,  0.29465},
                {0.15974   ,0.18257   ,0.20283   ,0.22679 ,0.24332 ,0.25875, 0.27778  , 0.29130},
                {0.15795   ,0.18051   ,0.20056   ,0.22426 ,0.24060 ,0.25587, 0.27468  , 0.28806},
                {0.15623   ,0.17856   ,0.19837   ,0.22181 ,0.23798 ,0.25308, 0.27169  , 0.28493},
                {0.15457   ,0.17665   ,0.19625   ,0.21944 ,0.23544 ,0.25038, 0.26880  , 0.28190},
                {0.15295   ,0.17481   ,0.19420   ,0.21715 ,0.23298 ,0.24776, 0.26600  , 0.27896},
                {0.15139   ,0.17301   ,0.19221   ,0.21493 ,0.23059 ,0.24523, 0.26328  , 0.27611},
                {0.14987   ,0.17128   ,0.19028   ,0.21281 ,0.22832 ,0.24281, 0.26069  , 0.27339},
                {0.14840   ,0.16959   ,0.18841   ,0.21068 ,0.22604 ,0.24039, 0.25809  , 0.27067}
            };
        }

        public void calcularEstadisticoChi()
        {

            double acum = 0;
            for (int i = 0; i < cantIntervalos; i++)
            {
                double num = Math.Pow((frecuenciasEsperadas[i] - frecuenciasObservadas[i]), 2);
                acum += (double)num / (double)frecuenciasEsperadas[i];
            }
            
            estadisticoCHI = acum;
        }

        public void calcularEstadisticoKS()
        {

            double ks = 0;
            double temp;
            for (int i = 0; i < cantIntervalos; i++)
            {
                temp = Math.Abs(acumProbObservada[i]-acumProbEsperada[i]);
                if(temp > ks)
                {
                    ks = temp;
                }
            }
            estadisticoKS = ks;
        }


    }
}
